# -*- coding: utf-8 -*-
"""SentimentAnalysis(LR).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MZAc1cWNjDsRgjSJsipq3eD69fDAcaF0
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
import pickle
import matplotlib.pyplot as plt

df = pd.read_csv('IMDB Dataset.csv')
print(df.shape)

df['review'] = df['review'].str.lower().str.replace('[^\w\s]', '')  # Lowercase and remove punctuation
df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})  # Encode sentiment labels

vectorizer = TfidfVectorizer(max_features=5000, ngram_range=(1, 2))
X = vectorizer.fit_transform(df['review']).toarray()
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

logmodel = LogisticRegression(max_iter=1000, random_state=42)
logmodel.fit(X_train, y_train)

predictions = logmodel.predict_proba(X_test)[:, 1]  # Probabilities for positive class
bin_predictions = [1 if x >= 0.5 else 0 for x in predictions]

accuracy = accuracy_score(y_test, bin_predictions)
conf_matrix = confusion_matrix(y_test, bin_predictions)
roc_auc = roc_auc_score(y_test, predictions)

print(f"LR Accuracy: {accuracy:.2f}")
print("Confusion Matrix:\n", conf_matrix)
print(f"AUC Score: {roc_auc:.3f}")

fpr, tpr, thresholds = roc_curve(y_test, predictions)
plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.3f})')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

pickle.dump(logmodel, open('sentiment_model_tfidf.pkl', 'wb'))
pickle.dump(vectorizer, open('vectorizer_tfidf.pkl', 'wb'))
print("Model and vectorizer saved.")

from google.colab import files

files.download('sentiment_model_tfidf.pkl')

files.download('vectorizer_tfidf.pkl')